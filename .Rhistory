devtools::load_all(".")
white.ref <- processReference(whiteRef,stripe = stripe,spectra = spectra)
devtools::load_all(".")
createReferenceMeanRow()
createReferenceMeanRow
source('~/GitHub/specimR/R/standardize.R', echo=TRUE)
createReferenceMeanRow
createReferenceMeanRow <- function(refBrick,e,outFile=NA,spectra){
if(is.character(refBrick)){#load in if necessary
refBrick <- raster::brick(refFile)
}
refBrick <-  raster::subset(refBrick,spectra)
#crop it by the earlier crop width
ebb <- raster::extent(refBrick)
ex <- raster::extent(e)
ebb@xmin <- ex@xmin
ebb@xmax <- ex@xmax
refBrick <- raster::crop(refBrick,ebb)
rbcm <- colSums(refBrick)/nrow(refBrick)
#preallocate
r <- raster::brick(ncol=ncol(refBrick), nrow=1,nl = dim(refBrick)[3], xmn=ex@xmin, xmx=ex@xmax, ymn=0, ymx=1)
r <- setValues(r,rbcm)
#save row for later processing.
if(!is.na(outFile)){
raster::writeRaster(r,filename = file.path("..",outFile), overwrite = TRUE)
}
}
white.ref <- processReference(whiteRef,stripe = stripe,spectra = spectra)
devtools::load_all(".")
rm(list = c("createReferenceMeanRow", "createReferenceTif", "createReferenceTif2", "normFun"))
devtools::load_all(".")
createReferenceMeanRow
devtools::load_all(".")
createReferenceMeanRow
white.ref <- processReference(whiteRef,stripe = stripe,spectra = spectra)
nrow(refBrick)
devtools::load_all(".")
white.ref <- processReference(whiteRef,stripe = stripe,spectra = spectra)
devtools::load_all(".")
white.ref <- processReference(whiteRef,stripe = stripe,spectra = spectra)
colSums(refBrick)
ref <- whiteRef
e <- stripe
refBrick <-  raster::subset(ref,spectra)
#crop it by the earlier crop width
ebb <- raster::extent(refBrick)
ex <- raster::extent(e)
ebb@xmin <- ex@xmin
ebb@xmax <- ex@xmax
refBrick <- raster::crop(refBrick,ebb)
rbcm <- colSums(refBrick)/nrow(refBrick)
rbcm
#preallocate
r <- raster::brick(ncol=ncol(refBrick), nrow=1,nl = dim(refBrick)[3], xmn=ex@xmin, xmx=ex@xmax, ymn=0, ymx=1)
r <- setValues(r,rbcm)
#save row for later processing.
if(!is.na(outFile)){
raster::writeRaster(r,filename = file.path("..",outFile), overwrite = TRUE)
}
devtools::load_all(".")
white.ref <- processReference(whiteRef,stripe = stripe,spectra = spectra)
row <- createReferenceMeanRow(ref = reference,e=stripe,outFile=NA,spectra=spectra)
row <- createReferenceMeanRow(ref = whiteRef,e=stripe,outFile=NA,spectra=spectra)
refBrick <-  raster::subset(ref,spectra)
#crop it by the earlier crop width
ebb <- raster::extent(refBrick)
ex <- raster::extent(e)
ebb@xmin <- ex@xmin
ebb@xmax <- ex@xmax
spectra
e
refBrick <- raster::crop(refBrick,ebb)
colSums(refBrick)
nrow(refBrick)
row <- createReferenceMeanRow(ref = whiteRef,e=stripe,outFile=NA,spectra=spectra)
refBrick <- raster::crop(refBrick,ebb)
rbcm <- colSums(refBrick)/nrow(refBrick)
colSums(refBrick)
matrixStats::colSums(refBrick)
?colSums
raster::colSums(refBrick)
devtools::load_all(".")
row <- createReferenceMeanRow(ref = whiteRef,e=stripe,outFile=NA,spectra=spectra)
white.ref <- processReference(whiteRef,stripe = stripe,spectra = spectra)
names(stripe)
names(row)
names(row) <- names(stripe)
row <- createReferenceMeanRow(ref = reference,e=stripe,outFile=NA,spectra=spectra)
devtools::load_all(".")
row <- createReferenceMeanRow(ref = reference,e=stripe,outFile=NA,spectra=spectra)
white.ref <- processReference(whiteRef,stripe = stripe,spectra = spectra)
dark.ref <- processReference(darkRef,stripe = stripe,spectra = spectra)
darkRef <- raster::brick(paths$darkref)
dark.ref <- processReference(darkRef,stripe = stripe,spectra = spectra)
#now normalize
normalized <- overlayR(stripe = stripe, white.ref = white.ref, dark.ref = dark.ref)
?overaly
?overlay
bands <- names(filen)
bands
bands <- names(filen) %>% stringr::str_remove(,"X")
bands <- names(filen) %>% stringr::str_remove("X")
bands
bands <- names(filen) %>%
stringr::str_remove("X") %>%
as.numeric()
bands
?near
library(dplyr)
?near
?nearest
spec.ind[i] <- which(abs(wavelengths[i]-bands) == min(abs(wavelengths[i]-bands)))
i <- 1
spec.ind[i] <- which(abs(wavelengths[i]-bands) == min(abs(wavelengths[i]-bands)))
spec.ind <- c()
spec.ind[i] <- which(abs(wavelengths[i]-bands) == min(abs(wavelengths[i]-bands)))
spec.ind[i]
spec.ind <- c()
for(i in 1:length(wavelengths)){
spec.ind[i] <- which(abs(wavelengths[i]-bands) == min(abs(wavelengths[i]-bands)))
}
spec.ind
bands <- names(filen) %>%
stringr::str_remove("X") %>%
as.numeric()
spec.ind <- c()
for(i in 1:length(wavelengths)){
spec.ind[i] <- which(abs(wavelengths[i]-bands) == min(abs(wavelengths[i]-bands)))
}
spec.ind <- sort(unique(spec.ind))
names(spec.ind) <- names(filen)[spec.ind]
spec.ind
geoChronR::askUser
devtools::load_all(".")
devtools::load_all(".")
test <- coreLength(stripe)
devtools::load_all(".")
test <- coreLength(stripe)
test
devtools::load_all(".")
test <- coreLength(stripe)
test
test <- normalize()
devtools::load_all(".")
library(specimR)
test <- normalize()
devtools::load_all(".")
test <- normalize()
plotRGB(whiteRef)
?plotRGB(whiteRef)
?plotRGB(whiteRef,stretch = "hist")
plotRGB(whiteRef,stretch = "hist")
dim(whiteRef)
plot(whiteRef[,100,100])
hist(whiteRef[,100,100])
hist(whiteRef[,1000,100])
t <- getNormValues(test)
devtools::load_all(".")
t2 <- getNormValues(test)
dim(test$normalized)
?transpose
?t
norm <- raster::t(normalized$normalized)
devtools::load_all(".")
norm <- raster::t(normalized$normalized)
t2 <- getNormValues(test)
test <- normalize()
t2 <- getNormValues(test)
t2
?raster::getValues()
?raster::getValues
test <- getNearestWavelengths(filen, c(450, 660, 670, 615))
test
test
names(test)
test <- getNearestWavelengths(filen, seq(660,670,by = 0.01))
test
hist(whiteRef[,1000,100])
dim(whiteRef)
hist(getValues(whiteRef[,1000,100]))
plot(whiteRef[,100,100])
hist(whiteRef[,1000,200])
?plotOutput
roi
plotRGB(stripe)
#choose the ROI
roi <- pick_roi_shiny(overview)
#crop the image
stripe <- raster::crop(raw,roi)
plotRGB(stripe)
test <- raster::crop(image,roi)
plotRGB(test,stretch = "hist")
#try cropping the image with the same height, but on the right side to look at the top bottom
topright <- roi
#try cropping the image with the same height, but on the right side to look at the top bottom
tr_roi <- roi
tr_roi@xmax <- raster::extent(image)@xmax
tr_roi@xmin <- raster::extent(image)@xmax-raster::extent(image)@xmax*.85
#try cropping the image with the same height, but on the right side to look at the top bottom
tr_roi <- roi
tr_roi@xmax <- raster::extent(image)@xmax
tr_roi@xmin <- raster::extent(image)@xmax-raster::extent(image)@xmax*.85
tr_roi@ymin <- tr_roi@ymax - (tr_roi@xmax-tr_roi@xmin)
tr.image <- raster::crop(image,tr_roi)
plotRGB(tr.image)
plotRGB(tr.image,stretch = "hist",axes = TRUE)
tr_roi
(tr_roi@xmax-tr_roi@xmin)
raster::extent(image)@xmax
raster::extent(image)@xmax-raster::extent(image)@xmax*.95
test <-
#try cropping the image with the same height, but on the right side to look at the top bottom
tr_roi <- roi
tr_roi@xmax <- raster::extent(image)@xmax
tr_roi@xmin <- raster::extent(image)@xmax*.85
tr_roi@ymin <- tr_roi@ymax - (tr_roi@xmax-tr_roi@xmin)
tr.image <- raster::crop(image,tr_roi)
plotRGB(tr.image,stretch = "hist",axes = TRUE)
tr_roi@xmax <- raster::extent(image)@xmax
tr_roi@xmin <- raster::extent(image)@xmax*.75
test <-
#try cropping the image with the same height, but on the right side to look at the top bottom
tr_roi <- roi
tr_roi@xmax <- raster::extent(image)@xmax
tr_roi@xmin <- raster::extent(image)@xmax*.75
tr_roi@ymin <- tr_roi@ymax - (tr_roi@xmax-tr_roi@xmin)
tr.image <- raster::crop(image,tr_roi)
plotRGB(tr.image,stretch = "hist",axes = TRUE)
plotRGB(br.image,stretch = "hist",axes = TRUE)
br_roi <- tr_roi
br_roi@ymin <- raster::extent(image)@ymin
br_roi@ymax <- br_roi@ymin + (br_roi@xmax-br_roi@xmin)
br.image <- raster::crop(image,br_roi)
plotRGB(br.image,stretch = "hist",axes = TRUE)
devtools::load_all(".")
pick_length_shiny()
pick_length_shiny()
devtools::load_all(".")
pick_length_shiny()
devtools::load_all(".")
pick_length_shiny()
devtools::load_all(".")
pick_length_shiny()
devtools::load_all(".")
pick_length_shiny()
devtools::load_all(".")
pick_length_shiny()
devtools::load_all(".")
pick_length_shiny()
devtools::load_all(".")
pick_length_shiny()
devtools::load_all(".")
pick_length_shiny()
devtools::load_all(".")
devtools::load_all(".")
nrow(stripe)
scale <- seq(cmPerPixel/2,length-cmPerPixel/2,length.out = nrow(stripe))
cmPerPixel <- pick_length_shiny(tr.image,br.image)
scale <- seq(cmPerPixel/2,(nrow(stripe)*cmPerPixel)-cmPerPixel/2,by = cmPerPixel)
scale
cmPerPixel/2
test <- normalize()
devtools::load_all(".")
test <- normalize()
test$scaleY
devtools::load_all(".")
pick_length_shiny()
pick_length_shiny(tr.image,br.image)
library(usethis)
use_package("shiny")
use_package("raster")
roxygen2::roxygenize()
use_package("crayon")
use_package("tcltk")
use_package("magrittr")
use_package("data.table")
use_package("stringr")
roxygen2::roxygenize()
rm(list = c("image", "scale"))
roxygen2::roxygenize()
library(specimR)
#load library
library(specimR)
#chose wavelengths of interest
wavelengths = c(570,590,615,630,660,665,690,730,790,845,900)
#set directory
(directory <- setwd("~/Desktop/test"))
#set directory
directory <- setwd("~/Desktop/test")
#load library
library(specimR)
#chose wavelengths of interest
wavelengths = c(570,590,615,630,660,665,690,730,790,845,900)
#set directory
directory <- "~/Downloads/Lakes380_FORSY_LC1U_2B_test_2020-06-05_04-05-39"
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
#chose wavelengths of interest
wavelengths = c(570,590,615,630,660,665,690,730,790,845,900)
#chose wavelengths of interest
wavelengths = c(570,590,615,630,660,665,690,730,790,845,900)
#set directory
directory <- "~/Downloads/Lakes380_FORSY_LC1U_2B_test_2020-06-05_04-05-39"
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
library(raster)
library(raster)
library(raster)
#chose wavelengths of interest
wavelengths <- c(570,590,615,630,660,665,690,730,790,845,900)
#set directory
directory <- "~/Downloads/Lakes380_FORSY_LC1U_2B_test_2020-06-05_04-05-39"
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
library(specimR)
library(raster)
#chose wavelengths of interest
wavelengths <- c(570,590,615,630,660,665,690,730,790,845,900)
#set directory
directory <- "~/Downloads/Lakes380_FORSY_LC1U_2B_test_2020-06-05_04-05-39"
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
library(shiny)
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
library(raster)
library(shiny)
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
image <- get("image",envir = .GlobalEnv)
devtools::load_all(".")
library(specimR)
library(specimR)
#load library
library(specimR)
library(raster)
library(shiny)
#chose wavelengths of interest
wavelengths <- c(570,590,615,630,660,665,690,730,790,845,900)
#set directory
directory <- "~/Downloads/Lakes380_FORSY_LC1U_2B_test_2020-06-05_04-05-39"
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
library(specimR)
#load library
library(specimR)
library(raster)
library(shiny)
#chose wavelengths of interest
wavelengths <- c(570,590,615,630,660,665,690,730,790,845,900)
#set directory
directory <- "~/Downloads/Lakes380_FORSY_LC1U_2B_test_2020-06-05_04-05-39"
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
library(specimR)
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
image <- get("image",envir = specimEnv)
library(specimR)
?get
devtools::load_all(".")
rm(list = c("image"))
devtools::load_all(".")
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
devtools::load_all(".")
devtools::load_all(".")
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
top.image <- get("tr.image",envir = specimEnv)
library(specimR)
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
library(specimR)
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
#load library
library(specimR)
library(raster)
library(shiny)
#chose wavelengths of interest
wavelengths <- c(570,590,615,630,660,665,690,730,790,845,900)
#set directory
directory <- "~/Downloads/Lakes380_FORSY_LC1U_2B_test_2020-06-05_04-05-39"
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths,roi = crpout)
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths,roi = crpout)
library(specimR)
normalized <- normalize(directory=directory,spectra = wavelengths)
normalized <- normalize(directory=directory,spectra = wavelengths,roi = crpout)
devtools::load_all(".")
normalized <- normalize(directory=directory,spectra = wavelengths,roi = crpout)
devtools::load_all(".")
normalized <- normalize(directory=directory,spectra = wavelengths,roi = crpout)
#load library
library(specimR)
#load library
library(specimR)
library(raster)
library(shiny)
normalized <- normalize(directory=directory,spectra = wavelengths,roi = crpout)
library(specimR)
normalized <- normalize(directory=directory,spectra = wavelengths,roi = crpout)
plotRGB(br.image,stretch = "hist",axes = TRUE)
cmPerPixel <- pick_length_shiny(tr.image,br.image,roi)
Q
devtools::load_all(".")
normalized <- normalize(directory=directory,spectra = wavelengths,roi = crpout)
devtools::load_all(".")
normalized <- normalize(directory=directory,spectra = wavelengths,roi = crpout)
normalized$scaleY
#choose indices
indices <- c("RABD660","RABD845","R570R630","R590R690")
#calculate indices and y-axis
core_output <- CalcIndices(normalized = normalized,indices = indices)
devtools::load_all(".")
data <- getNormValues(normalized = normalized)
allbands <- normalized$allbands
allbands
normalized$spectra
bands <- allbands[normalized$spectra]
bands
RABD_660 <-RABD660(data=data,bands = bands,allbands = allbands,indices=indices)
indices
indices
RABD_660 <-RABD660(data=data,bands = bands,allbands = allbands,indices=indices)
vals_660 <- data.table::data.table(Value = c(590,660,730))
vals_660[,merge:=Value]
data.table::setkeyv(vals_660,c('merge'))
r660 <-bands[vals_660,roll='nearest']
vals_660
install.packages(c("Cairo", "caTools", "hash", "magicaxis", "rtiff", "schoolmath"))
source('~/GitHub/specimR/R/Functions.R', echo=TRUE)
Parameters <- readENVI.hdr(file.path(directory,"capture","Lakes380_FORSY_LC1U_2B_test_2020-06-05_04-05-39.hdr"))
(nrow(Parameters)+1)
nrow(Parameters)
Parameters@.xData
Parameters@.xData$acquisition_date
devtools::load_all(".")
rm(list = c("closest_values", "Dims_A4", "libraries", "Pathbreakdown", "readENVI.hdr", "SpectralIndices"))
devtools::load_all(".")
#calculate indices and y-axis
core_output <- CalcIndices(normalized = normalized,indices = indices)
#calculate indices and y-axis
core_output <- GetIndices(normalized = normalized,indices = indices)
devtools::load_all(".")
#calculate indices and y-axis
core_output <- GetIndices(normalized = normalized,indices = indices)
devtools::load_all(".")
library(raster)
library(shiny)
#chose wavelengths of interest
wavelengths <- c(570,590,615,630,660,665,690,730,790,845,900)
#set directory
directory <- "~/Downloads/Lakes380_FORSY_LC1U_2B_test_2020-06-05_04-05-39"
#function for normalization
normalized <- normalize(directory=directory,spectra = wavelengths)
#choose indices
indices <- c("RABD660","RABD845","R570R630","R590R690")
#calculate indices and y-axis
core_output <- GetIndices(normalized = normalized,indices = indices)
#choose indices
indices <- c("RABD660","RABD845","R570R630","R590R690")
#calculate indices and y-axis
core_output <- GetIndices(normalized = normalized,indices = indices)
library(magrittr)
library(dplyr)
usethis::use_package("dplyr")
source('~/GitHub/specimR/R/spectralCalculations.R', echo=TRUE)
#calculate indices and y-axis
core_output <- GetIndices(normalized = normalized,indices = indices)
source('~/GitHub/specimR/R/spectralCalculations.R', echo=TRUE)
source('~/GitHub/specimR/R/spectralCalculations.R', echo=TRUE)
#calculate indices and y-axis
core_output <- GetIndices(normalized = normalized,indices = indices)
#load library
library(specimR)
library(magrittr)
library(dplyr)
library(raster)
library(shiny)
#function for normalization
normalized <- normalize(spectra = wavelengths)
library(specimR)
library(magrittr)
library(dplyr)
library(raster)
library(shiny)
#chose wavelengths of interest
wavelengths <- c(570,590,615,630,660,665,690,730,790,845,900)
#function for normalization
normalized <- normalize(spectra = wavelengths)
#choose indices
indices <- c("RABD660","RABD845","R570R630","R590R690")
#calculate indices and y-axis
core_output <- GetIndices(normalized = normalized,indices = indices)
View(core_output)
View(core_output)
plot(core_output$indicesVals$scaleY,core_output$indicesVals$RABD660)
plot(core_output$indicesVals$scaleY,core_output$indicesVals$RABD660,type = "l")
?install.packages
version()
version()
version
getNamespaceInfo(env,"s3methods")
