spectra
scaleY
normalizedLIST <- list(c(stripe,normalized,scaleY,spectra,allBands))
normalizedLIST
scaleY
spectra
allBands
spectra <- spectra[,2]
normalizedLIST <- list(c(stripe,normalized,scaleY,spectra,allBands))
(normalizedLIST)
setwd("/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture")
stripe <- brick('stripeRaster.tif')
library(shiny);library(dplyr);library(data.table);library(raster)
stripe <- brick('stripeRaster.tif')
normalized <- brick('normalizedRaster.tif')
scaleY <- read.csv("scaleY.csv")
scaleY <- scaleY[,2]
spectra <- read.csv("spectra.csv")
spectra <- spectra[,2]
allBands <- read.csv("allBands.csv")
allBands <- allBands[,2]
normalizedLIST <- list(c(stripe,normalized,scaleY,spectra,allBands))
normalizedLIST
stripe
normalized
scaleY
spectra
allBands
scaleY <- as.vector(scaleY[,2])
scaleY <- as.matrix(scaleY[,2])
class(spectra)
spectra <- as.vector(spectra)
scaleY <- as.vector(scaleY)
normalizedLIST <- list(c(stripe,normalized,scaleY,spectra,allBands))
(normalizedLIST)
normalizedLIST
class(normalizedLIST)
normalizedLIST <- list((stripe,normalized,scaleY,spectra,allBands))
normalizedLIST <- list(c(stripe,normalized))
(normalizedLIST)
normalizedLIST <- list(c(stripe,normalized,spectra))
(normalizedLIST)
normalizedLIST <- list(c(stripe,normalized,scaleY))
(normalizedLIST)
scaleY <- read.csv("scaleY.csv")
spectra <- read.csv("spectra.csv")
allBands <- read.csv("allBands.csv")
normalizedLIST <- list(c(stripe,normalized))
normalizedLIST <- list(c(stripe,normalized,scaleY))
(normalizedLIST)
normalizedLIST <- list(c(stripe,normalized,scaleY$x))
(normalizedLIST)
#scaleY <- scaleY[,2]
#scaleY <- as.vector(scaleY)
class(scaleY)
normalizedLIST <- list(c(stripe,normalized,scaleY))
(normalizedLIST)
normalizedLIST <- list(c(stripe,normalized,scaleY=scaleY))
(normalizedLIST)
normalizedLIST <- list(c(stripe=stripe,normalized=normalized,scaleY=scaleY,spectra=spectra,allbands=allbands))
normalizedLIST <- list(c(stripe=stripe,normalized=normalized,scaleY=scaleY,spectra=spectra,allBands=allBands))
(normalizedLIST)
normalized
scaleY
scaleY <- scaleY[,2]
write.csv(normalized$scaleY,"scaleY.csv",rownames=FALSE,colnames=FALSE)
write.csv(normalized$scaleY,"scaleY.csv",rownames=FALSE)
write.csv(normalized$scaleY,"scaleY.csv",row.names=FALSE,col.names=FALSE)
write.csv(normalized$scaleY,"scaleY.csv",row.names=FALSE)
write.csv(scaleY,"scaleY.csv",row.names=FALSE)
scaleY
scaleY <- read.csv("scaleY.csv")
scaleY
head(scaleY)
normalizedLIST <- list(c(stripe=stripe,normalized=normalized,scaleY=scaleY,spectra=spectra,allBands=allBands))
(normalizedLIST)
scaleY <- read.csv("scaleY.csv")
scaleY
head(scaleY)
normalizedLIST <- list(c(stripe=stripe,normalized=normalized,scaleY=scaleY,spectra=spectra,allBands=allBands))
(normalizedLIST)
allBands <- read.csv("allBands.csv")
allBands
allBands <- allBands[,2]
spectra <- spectra[,2]
write.csv(normalized$spectra,"spectra.csv",row.names=FALSE)
write.csv(normalized$allbands,"allBands.csv",row.names=FALSE)
write.csv(allbands,"allBands.csv",row.names=FALSE)
write.csv(allBands,"allBands.csv",row.names=FALSE)
write.csv(spectra,"spectra.csv",row.names=FALSE)
spectra <- read.csv("spectra.csv")
spectra
allBands
normalizedLIST <- list(c(stripe=stripe,normalized=normalized,scaleY=scaleY,spectra=spectra,allBands=allBands))
(normalizedLIST)
allBands
spectra
spectra2
allBands[spectra]
normalizedLIST <- list(c(stripe=stripe,normalized=normalized,scaleY=scaleY,spectra=spectra))
(normalizedLIST)
normalizedLIST <- list(c(stripe=stripe,normalized=normalized,scaleY=scaleY,spectra=spectra,allBands=allBands))
(normalizedLIST)
allBands
setwd("/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture")
spectra <- c(470,540,670,590,660,665,615,730,790,845,900,570,630,690)
normalized <- normalize(spectra=spectra)
#set directory
devtools::load_all("~/Documents/GitHub/specimR")
library(shiny);library(dplyr);library(data.table);library(raster)
normalized <- normalize(spectra=spectra)
#allbands <-
normalized$allbands
normalized$spectra
normalized$scaleY
write.csv(normalized$allbands,"allBands.csv",row.names=FALSE)
write.csv(normalized$spectra,"spectra.csv",row.names=FALSE)
write.csv(normalized$scaleY,"scaleY.csv",row.names=FALSE)
writeRaster(normalized$normalized, "normalizedRaster.tif")
writeRaster(normalized$normalized, "normalizedRaster.tif", overwrite=TRUE)
writeRaster(normalized$stripe, "stripeRaster.tif", overwrite=TRUE)
raw <- brick("Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58.raw")
stripe <- brick('stripeRaster.tif')
normalized <- brick('normalizedRaster.tif')
scaleY <- read.csv("scaleY.csv")
spectra <- read.csv("spectra.csv")
allBands <- read.csv("allBands.csv")
normalizedLIST <- list(c(stripe=stripe,normalized=normalized,scaleY=scaleY,spectra=spectra,allBands=allBands))
(normalizedLIST)
normalizedLIST <- list(c(stripe=stripe,normalized=normalized,scaleY=scaleY,spectra=spectra,allBands=allBands, raw=raw))
names(normalizedLIST) <- c("stripe","normalized","scaleY","spectra","allBands","raw")
names(normalizedLIST)
normalizedLIST
normalizedLIST$raw
normalizedLIST[[1]]
names(normalizedLIST[[1]]) <- c("stripe","normalized","scaleY","spectra","allBands","raw")
normalizedLIST[[1]]
normalized <- normalizedLIST[[1]]
names(normalized) <- c("stripe","normalized","scaleY","spectra","allBands","raw")
indices <- c("RABD660","RABD845","R570R630","R590R690")
source('~/Documents/GitHub/specimR/R/spectralCalculations.R')
core_output <- GetIndices(normalized = normalized,indices = indices)
indices <- core_output$indicesVals
indices$scaleYmm <- indices$scaleY*10
3
source('~/Documents/GitHub/specimR/R/spectralCalculations.R')
ggplot(data=indices)+geom_point(aes(x=RABD660,y=scaleYmm))
library(ggplot2);library(rasterVis)
ggplot(data=indices)+geom_point(aes(x=RABD660,y=scaleYmm))
image <- brick("/Users/ethanyackulic/Desktop/test/Lakes380_FORSY_LC1U_2B_test_2020-06-05_04-05-39.png")
extent(image)
plotRGB(image,stretch='hist')
image <- brick("Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58.png")
image <- brick("Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 .png")
plotRGB(image,stretch='hist')
stripe <- normalized$stripe
normal <- normalized$normalized
plotRGB(normal,stretch='hist',add=TRUE)
plotRGB(stripe,stretch='hist',add=TRUE)
p1_recorded <- recordPlot()
t <- ggdraw(p1_recorded)
library(ggplotify)
t <- ggdraw(p1_recorded)
library(cowplot)
t <- ggdraw(p1_recorded)
t
b <- rasterVis::levelplot(stripe, layers=1, add=TRUE, at=seq(min(stripe), max(stripe), length.out=20))
min(stripe)
stripe
min(stripe@z)
stripe@z
as.numeric(stripe@z)
unlist(stripe@z)
(stripe@z)
plot(stripe@z)
getZ(stripe)
getZ(stripe@z)
a <- rasterVis::levelplot(stripe, layers=1, add=TRUE)
update(a, aspect=0.9)
b <- rasterVis::levelplot(stripe, layers=1, add=TRUE, at=seq(0,3000, length.out=20))
update(b, aspect=0.9)
min(stripe$stripeRaster.14)
min(stripe$stripeRaster.14@z)
min(stripe$stripeRaster.14@data)
minValue(stripe)
maxValue(stripe)
stripe
a <- rasterVis::levelplot(normal, layers=1, add=TRUE)
update(a, aspect=0.9)
normal
a <- rasterVis::levelplot(normal, layers=1, add=TRUE, at=seq(0,2,length.out=6))
update(a, aspect=0.9)
a <- rasterVis::levelplot(normal, layers=1, add=TRUE, at=seq(0,.2,length.out=6))
update(a, aspect=0.9)
plot(normal)
spectra <- c(470,540,670,590,660,665,615,730,790,845,900,570,630,690)
normalized <- normalize(spectra=spectra)
write.csv(normalized$allbands,"allBands.csv",row.names=FALSE)
write.csv(normalized$spectra,"spectra.csv",row.names=FALSE)
write.csv(normalized$scaleY,"scaleY.csv",row.names=FALSE)
writeRaster(normalized$normalized, "normalizedRaster.tif", overwrite=TRUE)
writeRaster(normalized$stripe, "stripeRaster.tif", overwrite=TRUE)
indices <- c("RABD660","RABD845","R570R630","R590R690")
source('~/Documents/GitHub/specimR/R/spectralCalculations.R')
core_output <- GetIndices(normalized = normalized,indices = indices)
indices <- core_output$indicesVals
indices$scaleYmm <- indices$scaleY*10
core_output
write.csv(indices("indices.csv"))
library(ggplot2);library(rasterVis)
ggplot(data=indices)+geom_point(aes(x=RABD660,y=scaleYmm))
image <- brick("Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 .png")
stripe <- normalized$stripe
normal <- normalized$normalized
plotRGB(stripe,stretch='hist',add=TRUE)
plotRGB(image,stretch='hist')
plotRGB(stripe,stretch='hist',add=TRUE)
p1_recorded <- recordPlot()
t <- ggdraw(p1_recorded)
library(grid)
a <- rasterVis::levelplot(normal, layers=1, add=TRUE, at=seq(0,.2,length.out=6))
update(a, aspect=0.9)
normal
a <- rasterVis::levelplot(normal, layers=1, add=TRUE, at=seq(0,2,length.out=6))
update(a, aspect=0.9)
a <- rasterVis::levelplot(normal, layers=1, add=TRUE, at=seq(0,.6,length.out=6))
update(a, aspect=0.9)
a <- rasterVis::levelplot(normal, layers=1, add=TRUE, at=seq(0,.3,length.out=6))
update(a, aspect=0.9)
a <- rasterVis::levelplot(normal, layers=1, add=TRUE, at=seq(0,.25,length.out=6))
update(a, aspect=0.9)
a <- rasterVis::levelplot(normal, layers=1, add=TRUE, at=seq(0,.25,length.out=10))
update(a, aspect=0.9)
a <- rasterVis::levelplot(normal, layers=1, add=TRUE, at=seq(0,.25,length.out=15))
update(a, aspect=0.9)
update(a, aspect=1.5)
b <- rasterVis::levelplot(stripe, layers=1, add=TRUE, at=seq(0,3000, length.out=20))
update(b, aspect=0.9)
update(b, aspect=1.5)
update(a, aspect=1.5)
options(digits=2)
update(a, aspect=1.5)
a <- rasterVis::levelplot(normal, layers=1, add=TRUE, at=seq(0,.25,length.out=15))
update(a, aspect=1.5)
plot(normal)
update(a, aspect=1.5)
p <- grid.grab()
p
vis <- recordPlot()
vis1 <- as.grob(vis)
vis
lev <- ggdraw(vis)
RABD660 <- ggplot(data = indices)+geom_path(aes(x=RABD660,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(RABD660,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = mean(indices$RABD660))
RABD845 <- ggplot(data = indices)+geom_path(aes(x=RABD845,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(RABD845,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = 1)+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank())
R570_R630 <- ggplot(data = indices)+geom_path(aes(x=R570_R630,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(R570_R630,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = mean(indices$R570_R630))+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank())
R590_R690 <- ggplot(data = indices)+geom_path(aes(x=R590_R690,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(R590_R690,10,na.pad=TRUE)))+
theme_classic()+geom_vline(xintercept = mean(indices$R590_R690))+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+scale_y_reverse(position = "right")
plot_grid(t,p, RABD660,RABD845,R570_R630,R590_R690,ncol=6, nrow=1)
library(zoo)
RABD660 <- ggplot(data = indices)+geom_path(aes(x=RABD660,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(RABD660,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = mean(indices$RABD660))
RABD845 <- ggplot(data = indices)+geom_path(aes(x=RABD845,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(RABD845,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = 1)+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank())
R570_R630 <- ggplot(data = indices)+geom_path(aes(x=R570_R630,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(R570_R630,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = mean(indices$R570_R630))+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank())
R590_R690 <- ggplot(data = indices)+geom_path(aes(x=R590_R690,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(R590_R690,10,na.pad=TRUE)))+
theme_classic()+geom_vline(xintercept = mean(indices$R590_R690))+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+scale_y_reverse(position = "right")
plot_grid(t,p, RABD660,RABD845,R570_R630,R590_R690,ncol=6, nrow=1)
p
plot(p)
image(p)
grid.arrange(p1_recorded,dat)
library(gridExtra)
grid.arrange(p1_recorded,dat)
grid.arrange(p1_recorded)
grid.arrange(p)
grid.arrange(p,t)
grid.arrange(p,t,nrow=1)
grid.draw(p,t,nrow=1)
grid.draw(p,t)
grid.draw(p,t)
p
heightDetails(p)
grobHeight(p)
grobHeight(p) <- 1.5*grobHeight(p)
grobHeight(p)
resolveRasterSize(p)
resolveRasterSize(a)
class(a)
library(latticeExtra)
resizePanels(a, h=1,w=1)
resizePanels(a, h=1,w=6)
resizePanels(a, h=1,w=10)
t
st <- plotRGB(stripe,stretch='hist',add=TRUE)
class(st)
im <- plotRGB(image,stretch='hist')
st <- plotRGB(stripe,stretch='hist',add=TRUE)
class(st)
class(im)
extent(st)
resizePanels(a, h=1,w=10)
c <- resizePanels(a, h=1,w=10)
grid.arrange(c,t,nrow=1)
c <- resizePanels(a, h=1.5,w=10)
grid.arrange(c,t,nrow=1)
d <- resizePanels(t,h=1)
d <- resizePanels(t,h=1,w=1)
library(patchwork)
c+p+plot_layout(design = layout)
c
c+t+plot_layout(design = layout)
c+d+plot_layout(design = layout)
c+t+plot_layout(design = layout)
p+t+plot_layout(design = layout)
p+t
t
p
c+t+plot_layout(design = layout)
p+t+plot_layout(design = layout)
p+t+plot_layout()
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                       # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
multiplot(c,t)
c
t
resolveRasterSize(t)
dim(t)
size(t)
t <- ggdraw()+ draw_image(p1_recorded, scale = .7)
t <- ggdraw()+ draw_image(image, scale = .7)
t <- ggdraw(p1_recorded)+draw_image(scale=.7)
t <- ggdraw(p1_recorded)
t
t <- ggdraw(p1_recorded,scale=.7)
??ggdraw
?ggdraw
t <- ggdraw(p1_recorded, ylim = c(.2,.8))
t
t <- ggdraw(p1_recorded, ylim = c(.2,.8),clip="off")
t
t <- ggdraw(p1_recorded,clip="off")
t
t+draw_plot(scale=.7)
t+draw_plot(p1_recorded,scale=.7)
ggdraw+draw_plot(p1_recorded,scale=.7)
ggdraw()+draw_plot(p1_recorded,scale=.7)
t <- ggdraw()+draw_plot(p1_recorded,scale=.7)
p+t+plot_layout(design = layout)
grid.arrange(c,t,nrow=1)
a <- rasterVis::levelplot(normal, layers=1, add=TRUE, at=seq(0,.25,length.out=15),par.settings = list(axis.line = list(col = "transparent")))
update(a, aspect=1.5)
a <- rasterVis::levelplot(normal, layers=1, add=TRUE, at=seq(0,.25,length.out=15),par.settings = list(axis.line = list(col = "transparent"),axis.text = list(col="transparent")))
update(a, aspect=1.5)
a <- rasterVis::levelplot(normal, layers=1, add=TRUE, at=seq(0,.25,length.out=15),par.settings = list(axis.line = list(col = "transparent"),axis.text = list(col="transparent")))
c <- resizePanels(a, h=1.5,w=10)
grid.arrange(c,t,nrow=1)
RABD660 <- ggplot(data = indices)+geom_path(aes(x=RABD660,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(RABD660,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = mean(indices$RABD660))
RABD845 <- ggplot(data = indices)+geom_path(aes(x=RABD845,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(RABD845,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = 1)+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank())
R570_R630 <- ggplot(data = indices)+geom_path(aes(x=R570_R630,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(R570_R630,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = mean(indices$R570_R630))+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank())
R590_R690 <- ggplot(data = indices)+geom_path(aes(x=R590_R690,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(R590_R690,10,na.pad=TRUE)))+
theme_classic()+geom_vline(xintercept = mean(indices$R590_R690))+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+scale_y_reverse(position = "right")
plot_grid(t,p, RABD660,RABD845,R570_R630,R590_R690,ncol=6, nrow=1)
plot_grid(t,c, RABD660,RABD845,R570_R630,R590_R690,ncol=6, nrow=1)
c <- resizePanels(a, h=1,w=6)
RABD660 <- ggplot(data = indices)+geom_path(aes(x=RABD660,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(RABD660,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = mean(indices$RABD660))
RABD845 <- ggplot(data = indices)+geom_path(aes(x=RABD845,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(RABD845,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = 1)+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank())
R570_R630 <- ggplot(data = indices)+geom_path(aes(x=R570_R630,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(R570_R630,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = mean(indices$R570_R630))+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank())
R590_R690 <- ggplot(data = indices)+geom_path(aes(x=R590_R690,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(R590_R690,10,na.pad=TRUE)))+
theme_classic()+geom_vline(xintercept = mean(indices$R590_R690))+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+scale_y_reverse(position = "right")
plot_grid(t,c, RABD660,RABD845,R570_R630,R590_R690,ncol=6, nrow=1)
grid.arrange((t,c, RABD660,RABD845,R570_R630,R590_R690,ncol=6, nrow=1))
grid.arrange((t,c, RABD660,RABD845,R570_R630,R590_R690,nrow=1))
grid.arrange(t,c, RABD660,RABD845,R570_R630,R590_R690,nrow=1)
plot_grid(t,a, RABD660,RABD845,R570_R630,R590_R690,ncol=6, nrow=1)
c
grid.arrange(t,c)
grid.arrange(t,c, RABD660,RABD845,R570_R630,R590_R690,nrow=1)
raw <- brick("Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58.raw")
stripe <- brick('stripeRaster.tif')
#set directory
devtools::load_all("~/Documents/GitHub/specimR")
library(shiny);library(dplyr);library(data.table);library(raster)
setwd("/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture")
raw <- brick("Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58.raw")
stripe <- brick('stripeRaster.tif')
normalized <- brick('normalizedRaster.tif')
scaleY <- read.csv("scaleY.csv")
spectra <- read.csv("spectra.csv")
allBands <- read.csv("allBands.csv")
normalizedLIST <- list(c(stripe=stripe,normalized=normalized,scaleY=scaleY,spectra=spectra,allBands=allBands, raw=raw))
normalized <- normalizedLIST[[1]]
indices <- c("RABD660","RABD845","R570R630","R590R690")
image <- brick("Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 .png")
stripe <- normalized$stripe
normal <- normalized$normalized
im <- plotRGB(image,stretch='hist')
st <- plotRGB(stripe,stretch='hist',add=TRUE)
p1_recorded <- recordPlot()
pn2 <- grid.grab()
t <- ggdraw()+draw_plot(p1_recorded,scale=.5)
library(latticeExtra)
library(patchwork)
library(grid)
pn2 <- grid.grab()
t <- ggdraw()+draw_plot(p1_recorded,scale=.5)
library(ggplotify);library(cowplot)
t <- ggdraw()+draw_plot(p1_recorded,scale=.5)
layout <- "AB"
p+t+plot_layout(design = layout)
a <- rasterVis::levelplot(normal, layers=1, colorkey=FALSE,add=TRUE, at=seq(0,.25,length.out=15), xlab=NULL, ylab=NULL, scales=list(draw=FALSE))
update(a, aspect=1.8)
c <- resizePanels(a, h=1,w=10)
c2 <- ggdraw()+ draw_plot(c)
#t2 <- resizePanels(t,h=1,w=10)
p <- grid.grab()
p <- grob(p)
p2_recorded <- recordPlot()
p2 <- grob(p2_recorded)
p1 <- grob(p1_recorded)
print(p1)
par(mfrow=c(1,1))
vis <- recordPlot()
vis1 <- as.grob(vis)
grid.arrange(p1_recorded,p2_recorded)
library(egg)
library(gridExtra)
grid.arrange(p1_recorded,p2_recorded)
grid.arrange(grobs = lapply(list(t,c2),
set_panel_size,
width = unit(15, "cm"),
height = unit(4, "in")),nrow=1)
t <- ggdraw()+draw_plot(p1_recorded,scale=.8)
grid.arrange(grobs = lapply(list(t,c2),
set_panel_size,
width = unit(15, "cm"),
height = unit(4, "in")),nrow=1)
install.packages("Hmisc")
library(Hmisc)
hmisc::
nchar()
library(getPass)            # A micro-package for reading passwords
install.packages('getPass')
library(getPass)            # A micro-package for reading passwords
library(httr)               # To send a request to the server/receive a response from the server
library(jsonlite)           # Implements a bidirectional mapping between JSON data and the most important R data types
library(ggplot2)            # Functions for graphing and mapping
library(tidyr)              # Function for working with tabular data
library(dplyr)              # Function for working with tabular data
library(readr)              # Read rectangular data like CSV
outDir <- file.path('./data/')          # Create an output directory if it doesn't exist
suppressWarnings(dir.create(outDir))
source('./Tokens/EARTHDATA_Token.R') #path will change based on where you stored it
