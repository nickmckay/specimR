image <- brick("Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 .png")
stripe <- normalized$stripe
normal <- normalized$normalized
im <- plotRGB(image,stretch='hist')
st <- plotRGB(stripe,stretch='hist',add=TRUE)
p1_recorded <- recordPlot()
pn2 <- grid.grab()
t <- ggdraw()+draw_plot(p1_recorded,scale=.5)
library(latticeExtra)
library(patchwork)
library(grid)
pn2 <- grid.grab()
t <- ggdraw()+draw_plot(p1_recorded,scale=.5)
library(ggplotify);library(cowplot)
t <- ggdraw()+draw_plot(p1_recorded,scale=.5)
layout <- "AB"
p+t+plot_layout(design = layout)
a <- rasterVis::levelplot(normal, layers=1, colorkey=FALSE,add=TRUE, at=seq(0,.25,length.out=15), xlab=NULL, ylab=NULL, scales=list(draw=FALSE))
update(a, aspect=1.8)
c <- resizePanels(a, h=1,w=10)
c2 <- ggdraw()+ draw_plot(c)
#t2 <- resizePanels(t,h=1,w=10)
p <- grid.grab()
p <- grob(p)
p2_recorded <- recordPlot()
p2 <- grob(p2_recorded)
p1 <- grob(p1_recorded)
print(p1)
par(mfrow=c(1,1))
vis <- recordPlot()
vis1 <- as.grob(vis)
grid.arrange(p1_recorded,p2_recorded)
library(egg)
library(gridExtra)
grid.arrange(p1_recorded,p2_recorded)
grid.arrange(grobs = lapply(list(t,c2),
set_panel_size,
width = unit(15, "cm"),
height = unit(4, "in")),nrow=1)
t <- ggdraw()+draw_plot(p1_recorded,scale=.8)
grid.arrange(grobs = lapply(list(t,c2),
set_panel_size,
width = unit(15, "cm"),
height = unit(4, "in")),nrow=1)
install.packages("Hmisc")
library(Hmisc)
hmisc::
nchar()
library(getPass)            # A micro-package for reading passwords
install.packages('getPass')
library(getPass)            # A micro-package for reading passwords
library(httr)               # To send a request to the server/receive a response from the server
library(jsonlite)           # Implements a bidirectional mapping between JSON data and the most important R data types
library(ggplot2)            # Functions for graphing and mapping
library(tidyr)              # Function for working with tabular data
library(dplyr)              # Function for working with tabular data
library(readr)              # Read rectangular data like CSV
outDir <- file.path('./data/')          # Create an output directory if it doesn't exist
suppressWarnings(dir.create(outDir))
source('./Tokens/EARTHDATA_Token.R') #path will change based on where you stored it
indices <- read.csv("indices.csv")
spectra <- c(470,540,670,590,660,665,615,730,790,845,900,570,630,690)
normalized
#set directory
devtools::load_all("~/Documents/GitHub/specimR")
library(shiny);library(dplyr);library(data.table);library(raster)
directory <- setwd("~/Desktop/test")
setwd("/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture")
setwd("/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture")
spectra <- c(470,540,670,590,660,665,615,730,790,845,900,570,630,690)
normalized <- normalize(spectra=spectra)
write.csv(normalized$allbands,"allBands.csv",row.names=FALSE)
write.csv(normalized$spectra,"spectra.csv",row.names=FALSE)
write.csv(normalized$scaleY,"scaleY.csv",row.names=FALSE)
writeRaster(normalized$normalized, "normalizedRaster.tif", overwrite=TRUE)
writeRaster(normalized$stripe, "stripeRaster.tif", overwrite=TRUE)
indices <- c("RABD660","RABD845","R570R630","R590R690")
source('~/Documents/GitHub/specimR/R/spectralCalculations.R')
core_output <- GetIndices(normalized = normalized,indices = indices)
indices <- core_output$indicesVals
indices$scaleYmm <- indices$scaleY*10
indices
write.csv(indices,"indices.csv")
library(ggplot2);library(rasterVis)
ggplot(data=indices)+geom_point(aes(x=RABD660,y=scaleYmm))
dev.print(png, file = "print.png", width=1024,height=768)
plot(1:2, type='n', main="", xlab="x", ylab="y")
image <- brick("Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 .png")
image <- brick("Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 .png")
setwd("/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture")
image <- brick("Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 .png")
library(ggplot2);library(rasterVis)
ggplot(data=indices)+geom_point(aes(x=RABD660,y=scaleYmm))
stripe <- normalized$stripe
normal <- normalized$normalized
im <- plotRGB(image,stretch='hist')
??plotRGB()
?plotRGB()
im <- plotRGB(image,stretch='hist',alpha=.9)
im <- plotRGB(image,stretch='hist',alpha=.5)
st <- plotRGB(stripe,stretch='hist',add=TRUE)
im <- plotRGB(image,stretch='hist',alpha=205)
im <- plotRGB(image,stretch='hist',alpha=100)
st <- plotRGB(stripe,stretch='hist',add=TRUE)
p1_recorded <- recordPlot()
t <- ggdraw()+draw_plot(p1_recorded,scale=.8)
library(latticeExtra)
library(patchwork)
library(grid)
t <- ggdraw()+draw_plot(p1_recorded,scale=.8)
library(latticeExtra)
library(ggplotify);library(cowplot)
library(patchwork)
library(grid)
library(ggplot2);library(rasterVis)
library(cowplot);library(ggplotify);library(gridExtra);library(rasterVis);library(png);library(grid);library(zoo)
RABD660 <- ggplot(data = indices)+geom_path(aes(x=RABD660,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(RABD660,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = mean(indices$RABD660))
#Redraw
t <- ggdraw()+draw_plot(p1_recorded,scale=.8)
a <- rasterVis::levelplot(normal, layers=1, colorkey=FALSE,add=TRUE, at=seq(0,.25,length.out=15), xlab=NULL, ylab=NULL, scales=list(draw=FALSE))
update(a, aspect=1.8)
c <- resizePanels(a, h=1,w=10)
c
c2 <- ggdraw()+ draw_plot(c)
c2
t2 <- resizePanels(t,h=1,w=10)
p <- grid.grab()
p2_recorded <- recordPlot()
grid.arrange(grobs = lapply(list(t,c2),
set_panel_size,
width = unit(15, "cm"),
height = unit(4, "in")),nrow=1)
grid.arrange(grobs = lapply(list(t,c2),
width = unit(15, "cm"),
height = unit(4, "in")),nrow=1)
RABD660 <- ggplot(data = indices)+geom_path(aes(x=RABD660,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(RABD660,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = mean(indices$RABD660))
RABD845 <- ggplot(data = indices)+geom_path(aes(x=RABD845,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(RABD845,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = 1)+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank())
R570_R630 <- ggplot(data = indices)+geom_path(aes(x=R570_R630,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(R570_R630,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = mean(indices$R570_R630))+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank())
R590_R690 <- ggplot(data = indices)+geom_path(aes(x=R590_R690,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(R590_R690,10,na.pad=TRUE)))+
theme_classic()+geom_vline(xintercept = mean(indices$R590_R690))+ theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+scale_y_reverse(position = "right")
plot_grid(t,c, RABD660,RABD845,R570_R630,R590_R690,ncol=6, nrow=1)
grid.arrange(t,c, RABD660,RABD845,R570_R630,R590_R690,nrow=1,set_panel_size,
width = unit(2, "cm"),
height = unit(1, "in")
)
set_panel_size(grid.arrange(t,c, RABD660,RABD845,R570_R630,R590_R690,nrow=1,set_panel_size,
height = unit(1, "in")
set_panel_size(grid.arrange(t,c, RABD660,RABD845,R570_R630,R590_R690,nrow=1,set_panel_size,
width = unit(2, "cm"),
height = unit(1, "in")
)
)
grid.arrange(t,c, RABD660,RABD845,R570_R630,R590_R690,ncol=6, nrow=1)
t <- set_panel_size(RABD660)
t <- egg::set_panel_size(RABD660)
R660 <- egg::set_panel_size(RABD660)
#Redraw
t <- ggdraw()+draw_plot(p1_recorded,scale=.8)
t <- egg::set_panel_size(t)
#Redraw
t <- ggdraw()+draw_plot(p1_recorded,scale=.8)
tX <- egg::set_panel_size(t)
cX <- egg::set_panel_size(c)
R660 <- egg::set_panel_size(RABD660)
tX <- egg::set_panel_size(t)
tX
cX <- egg::set_panel_size(c2)
cX
grid.arrange(tX,cX,R660)
grid.arrange(tX,cX,R660, ncol=3,nrow=1)
R660 <- egg::set_panel_size(RABD660, margin = unit(2, "cm"),
width = unit(2, "cm",)
height=unit(6, "cm"))
R660 <- egg::set_panel_size(RABD660, margin = unit(2, "cm"),
width = unit(2, "cm"),
height = unit(6, "cm"))
tX <- egg::set_panel_size(t, margin = unit(2, "cm"),
width = unit(2, "cm"),
height=unit(6, "cm"))
cX <- egg::set_panel_size(c2, margin = unit(2, "cm"),
width = unit(2, "cm"),
height=unit(6, "cm"))
grid.arrange(tX,cX,R660, ncol=3,nrow=1)
tX <- egg::set_panel_size(t, margin = unit(2, "cm"),
width = unit(2, "cm"),
height=height(R660))
class(c2)
class(t)
t
grid.arrange(t,c2)
grid.arrange(t,c2,ncol=2)
grid.arrange(tX,cX,ncol=2)
grid.arrange(t,c2,R660,ncol=2)
grid.arrange(t,c2,R660,ncol=3)
lay <- rbind(c(1,2,3),
c(1,2,3),
c(1,2,3))
grid.arrange(grobs=c(t,c2,R660),layout_matrix=lay)
grid.arrange(grobs=c(t,c2,R660),layout_matrix=lay)
lay <- rbind(c(1,2,3),
c(1,2,3),
c(1,2,3))
grid.arrange(grobs=c(t,c2,R660),layout_matrix=lay)
lay <- rbind(c(1,2,3))
#          c(1,2,3),
#         c(1,2,3))
grid.arrange(grobs=c(t,c2,R660),layout_matrix=lay)
#          c(1,2,3),
#         c(1,2,3))
grid.arrange(grobs=c(t,c2,R660))
#          c(1,2,3),
#         c(1,2,3))
grid.arrange(t,c2,R660),layout_matrix=lay)
#          c(1,2,3),
#         c(1,2,3))
grid.arrange(t,c2,R66),layout_matrix=lay)
#          c(1,2,3),
#         c(1,2,3))
grid.arrange(t,c2,R66,layout_matrix=lay)
#          c(1,2,3),
#         c(1,2,3))
grid.arrange(t,c2,R660,layout_matrix=lay)
grid.arrange(tX,R660,ncol=2)
extent(stripe)
extent(raw)
raw <- brick("Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58.raw")
extent(raw)
ratio <- (stripe@extent@ymax-stripe@extent@ymin)/(raw@extent@ymax-raw@extent@ymin)
ratio
R660 <- egg::set_panel_size(RABD660, margin = unit(2, "cm"),
width = unit(2*ratio, "cm"),
height = unit(6*ratio, "cm"))
tX <- egg::set_panel_size(t, margin = unit(2, "cm"),
width = unit(2, "cm"),
height=unit(6, "cm"))
grid.arrange(tX,R660,ncol=2)
tX <- egg::set_panel_size(t, margin = unit(.5, "cm"),
width = unit(4, "cm"),
height=unit(8, "cm"))
R660 <- egg::set_panel_size(RABD660, margin = unit(.5, "cm"),
width = unit(4*ratio, "cm"),
height = unit(8*ratio, "cm"))
grid.arrange(tX,R660,ncol=2)
RABD660 <- ggplot(data = indices)+geom_path(aes(x=RABD660,y=scaleYmm),alpha=.3)+geom_path(aes(y=scaleYmm,x=rollmean(RABD660,10,na.pad=TRUE)))+
theme_classic()+scale_y_reverse()+geom_vline(xintercept = mean(indices$RABD660))+
scale_x_discrete(position="top")
RABD660
R660 <- egg::set_panel_size(RABD660, margin = unit(.5, "cm"),
width = unit(4*ratio, "cm"),
height = unit(8*ratio, "cm"))
tX <- egg::set_panel_size(t, margin = unit(.5, "cm"),
width = unit(4, "cm"),
height=unit(8, "cm"))
cX <- egg::set_panel_size(c2, margin = unit(2, "cm"),
width = unit(2, "cm"),
height=unit(6, "cm"))
grid.arrange(tX,cX,R660, ncol=3,nrow=1)
grid.arrange(tX,R660,ncol=2)
tX <- egg::set_panel_size(t, margin = unit(.5, "cm"),
width = unit(6, "cm"),
height=unit(8, "cm"))
tX
grid.arrange(tX,R660,ncol=2)
t
lay <- rbind(c(1,1,2))
grid.arrange(tX,R660,layout_matrix=lay)
#Redraw
t <-
ggdraw()+draw_plot(p1_recorded,scale=.8)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,scale=.8)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,scale=2)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,scale=1)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,scale=1, width = 6)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,scale=1, width = 2,height=6)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,scale=1, width = 1,height=2)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,scale=1, width = 1,height=1)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,scale=1, width = 1.5,height=1)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,width = 1.5,height=1)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,width = 2,height=1)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,width = .3,height=1)
p1_recorded
summary(p1_recorded)
dim(p1_recorded)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,x=0,y=0,width = 1.5,height=1,scale=1.6)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,x=0,y=0,width = 1.5,height=1,scale=1)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,x=-2,y=0,width = 2,height=1,scale=1)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,x=0,y=0,width = 2,height=1,scale=1)
#Redraw
#t <-
ggdraw()+draw_plot(p1_recorded,scale=1)
#Redraw
t <- ggdraw()+draw_plot(p1_recorded,scale=1)
update(t,aspect=1.5)
update(p1_recorded,aspect=1.5)
resizePanels(p1_recorded,aspect=1.5)
resizePanels(p1_recorded,h=1,w=10)
resizePanels(t,h=1,w=10)
#Redraw
t <- ggdraw()+draw_image(p1_recorded,scale=1)
normal
normalized <- brick('normalizedRaster.tif')
normalized
##Rastervis plot - 'trellis' object
a <- rasterVis::levelplot(normalized, layers=1, colorkey=FALSE,add=TRUE, at=seq(0,.25,length.out=15), xlab=NULL, ylab=NULL, scales=list(draw=FALSE))
#two formatting options for plotting levelplot
update(a, aspect=1.8)
raw@extent@ymax
library(specimR)
library(magrittr)
library(dplyr)
library(raster)
library(shiny)
library(readr)
#specify output path
out.path <- "~/Downloads/testFolder/"
#chose wavelengths of interest
wavelengths <- c(570,590,615,630,660,665,690,730,790,845,900)
#function for normalization
normalized <- normalize(spectra = wavelengths,output.dir = out.path)
devtools::load_all(".")
#chose wavelengths of interest
wavelengths <- c(570,590,615,630,660,665,690,730,790,845,900)
#function for normalization
normalized <- normalize(spectra = wavelengths,output.dir = out.path)
#calculate indices
indexTable <- calculateIndices(normalized,indices = c("RABD660","RABD845","R570R630","R590R690"))
#write indices to a csv file
readr::write_csv(indexTable,file.path(out.path,normalized$corename,"spectralIndices.csv"))
setwd("/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture")
#function for normalization
normalized <- normalize(spectra = wavelengths,output.dir = out.path)
plotSpectralDashboard <- function(){}
widthMult <- 3
# Heatmap
plotData <- br %>%
as.matrix() %>%
# Data wrangling
as_tibble() %>%
rowid_to_column(var="depthIndex") %>%
gather(key="X", value="index", -1) %>%
# Change X to numeric
mutate(X=as.numeric(gsub("V","",X))*normalized$cmPerPixel) %>%
#convert to depth
mutate(depth = ind$depth[depthIndex])
br
br
print(outplot)
plotSpectralDashboard
plotSpectralDashboard()
#load library
library(specimR)
library(magrittr)
library(dplyr)
library(raster)
library(shiny)
library(readr)
#specify output path
out.path <- "~/Downloads/testFolder/"
#load library
load.all(specimR)
#load library
library(specimR)
library(magrittr)
library(dplyr)
library(raster)
library(shiny)
library(readr)
setwd("/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture")
out.path <- "/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture"
#chose wavelengths of interest
wavelengths <- c(570,585:595,615,630,659:671,690,725:735,790,845,900)
#function for normalization
normalized <- normalize(spectra = wavelengths,output.dir = out.path)
devtools::load_all("~/Documents/GitHub/specimR")
#function for normalization
normalized <- normalize(spectra = wavelengths,output.dir = out.path)
install.packages('spatialEco')
devtools::load_all("~/Documents/GitHub/specimR")
install.packages('smoother')
devtools::load_all("~/Documents/GitHub/specimR")
#specify output path
#out.path <- "~/Downloads/testFolder/"
out.path <- "/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture"
#chose wavelengths of interest
wavelengths <- c(570,585:595,615,630,659:671,690,725:735,790,845,900)
#function for normalization
normalized <- normalize(spectra = wavelengths,output.dir = out.path)
#chose wavelengths of interest
#wavelengths <- c(570,585:595,615,630,659:671,690,725:735,790,845,900)
wavelengths <- c(570,659:671,730)
#function for normalization
normalized <- normalize(spectra = wavelengths,output.dir = out.path)
#write indices to a csv file
readr::write_csv(indexTable,file.path(out.path,normalized$corename,"spectralIndices.csv"))
#calculate indices
#indexTable <- calculateIndices(normalized,indices = c("RABD660","RABD660670","RABD845","R570R630","R590R690"))
indexTable <- calculateIndices(normalized,indices = c("RABD660","RABD660670"))
#calculate indices
#indexTable <- calculateIndices(normalized,indices = c("RABD660","RABD660670","RABD845","R570R630","R590R690"))
indexTable <- calculateIndices(normalized,indices = c("RABD660","RABD660670"))
#calculate indices
#indexTable <- calculateIndices(normalized,indices = c("RABD660","RABD660670","RABD845","R570R630","R590R690"))
indexTable <- calculateIndices(normalized,indices = c("RABD660","RABD660670"))
#calculate indices
#indexTable <- calculateIndices(normalized,indices = c("RABD660","RABD660670","RABD845","R570R630","R590R690"))
indexTable <- calculateIndices(normalized,indices = c("RABD660","RABD660670"))
normalized
#specify output path
#out.path <- "~/Downloads/testFolder/"
out.path <- "/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture"
devtools::load_all("~/Documents/GitHub/specimR")
setwd("/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture")
#chose wavelengths of interest
wavelengths <- c(550,570,590,615,630,650,659:671,690,730,790,845,900)
indices <-  c("RABD615","RABD660670","RABD845","R570R630","R590R690")
devtools::load_all("~/Documents/GitHub/specimR")
setwd("/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture")
#specify output path
#out.path <- "~/Downloads/testFolder/"
out.path <- "/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture"
spectralWorkflow(indices = indices,wavelengths = wavelengths)
spectralWorkflow(indices = indices,wavelengths = wavelengths)
#load library
library(specimR)
library(magrittr)
library(dplyr)
library(raster)
library(shiny)
library(readr)
library(tidyr)
#chose wavelengths of interest
wavelengths <- c(550,570,590,615,630,650,659:671,690,730,790,845,900)
indices <-  c("RABD615","RABD660670","RABD845","R570R630","R590R690")
spectralWorkflow(indices = indices,wavelengths = wavelengths)
spectralWorkflow(indices = indices)
??ggbuild()
??ggplot_build()
?ggplot_build()
library(ggplot2)
#chose wavelengths of interest
wavelengths <- c(550,570,590,615,630,650,659:671,690,730,790,845,900)
indices <-  c("RABD615","RABD660670","RABD845","R570R630","R590R690")
spectralWorkflow(indices = indices)
spectralWorkflow(indices = indices)
setwd("~Desktop/test")
setwd(~Desktop/test)
setwd("~/Desktop/test")
spectralWorkflow(indices = indices)
spectralWorkflow(indices = indices)
#load library
library(specimR)
library(magrittr)
library(dplyr)
library(raster)
library(shiny)
library(readr)
library(tidyr)
library(ggplot2)
library(tibble)
#chose wavelengths of interest
wavelengths <- c(550,570,590,615,630,650,659:671,690,730,790,845,900)
indices <-  c("RABD615","RABD660670","RABD845","R570R630","R590R690")
spectralWorkflow(indices = indices,wavelengths = wavelengths)
devtools::load_all(".")
#chose wavelengths of interest
wavelengths <- c(550,570,590,615,630,650,659:671,690,730,790,845,900)
indices <-  c("RABD615","RABD660670","RABD845","R570R630","R590R690")
spectralWorkflow(indices = indices,wavelengths = wavelengths)
setwd("/Volumes/easystore/Forsy/Lakes380_NGAHE_LC1U_1B_S2_2019-11-12_00-02-58 /capture")
spectralWorkflow(indices = indices,wavelengths = wavelengths)
